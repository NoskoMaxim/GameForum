swagger: "2.0"
info:
  description: "This is a simple Web-application that is a game forum"
  version: "1.0.0"
  title: "Swagger Game Forum"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "gameforum.swagger.io"
basePath: "/game-forum"
tags:
- name: "publication"
  description: "Everything about your publications"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"  
schemes:
- "https"
- "http"
paths:
  /publication:
    post:
      tags:
      - "publication"
      summary: "Add a new publication to the forum"
      description: ""
      operationId: "addPublication"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Publication object that needs to be added to the forum"
        required: true
        schema:
          $ref: "#/definitions/Publication"
      responses:
        "400":
          description: "Bad request"
      security:
      - petstore_auth:
        - "write:publications"
        - "read:publications"
    put:
      tags:
      - "publication"
      summary: "Update an existing publication"
      description: ""
      operationId: "updatePublication"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Publication object that needs to be added to the forum"
        required: true
        schema:
          $ref: "#/definitions/Publication"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publication not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:publications"
        - "read:publications"
  /publication/findByTitle:
    get:
      tags:
      - "publication"
      summary: "Finds Publications by title"
      description: "Multiple title values can be provided with comma separated strings"
      operationId: "findPublicationsByTitle"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Title values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: ""
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publication"
        "400":
          description: "Invalid Title value"
      security:
      - petstore_auth:
        - "write:publications"
        - "read:publications"  
  /publication/{publicationId}:
    get:
      tags:
      - "publication"
      summary: "Find publication by ID"
      description: "Returns a single publication"
      operationId: "getPublicationById"
      produces:
      - "application/json"
      parameters:
      - name: "publicationId"
        in: "path"
        description: "ID of publication to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Publication"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publication not found"
      security:
      - petstore_auth:
        - "read:publications"
    delete:
      tags:
      - "publication"
      summary: "Deletes a publication"
      description: ""
      operationId: "deletePublication"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "publicationId"
        in: "path"
        description: "Publication id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Publication not found"
      security:
      - petstore_auth:
        - "write:publications"
        - "read:publications"      
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      operationId: "createUsers"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "204":
          description: "User not found"
        "400":
          description: "Invalid username supplied"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user/username supplied"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://gameforumswagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:publications: "modify publications in your account"
      read:publications: "read your publications"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
      
  Publication:
    type: "object"
    required:
    - "title"
    - "content"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      title:
        type: "string"
        example: "MinecraftNews"
      content:
        type: "string"
        example: "MinecraftNews is a cool game"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true 
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "publication status in the forum"
        enum:
        - "exists"
        - "deleted"
        - "edited"
    xml:
      name: "Publication"